Subject: [PATCH] start the project
---
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/.gitignore	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,33 @@
+HELP.md
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
Index: .mvn/wrapper/maven-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/.mvn/wrapper/maven-wrapper.properties	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,19 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+wrapperVersion=3.3.2
+distributionType=only-script
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.7/apache-maven-3.9.7-bin.zip
Index: mvnw
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mvnw b/mvnw
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/mvnw	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,259 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Apache Maven Wrapper startup batch script, version 3.3.2
+#
+# Optional ENV vars
+# -----------------
+#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
+#   MVNW_REPOURL - repo url base for downloading maven distribution
+#   MVNW_USERNAME/MVNW_PASSWORD - users and password for downloading maven
+#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
+# ----------------------------------------------------------------------------
+
+set -euf
+[ "${MVNW_VERBOSE-}" != debug ] || set -x
+
+# OS specific support.
+native_path() { printf %s\\n "$1"; }
+case "$(uname)" in
+CYGWIN* | MINGW*)
+  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
+  native_path() { cygpath --path --windows "$1"; }
+  ;;
+esac
+
+# set JAVACMD and JAVACCMD
+set_java_home() {
+  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
+  if [ -n "${JAVA_HOME-}" ]; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+      JAVACCMD="$JAVA_HOME/jre/sh/javac"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+      JAVACCMD="$JAVA_HOME/bin/javac"
+
+      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
+        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
+        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
+        return 1
+      fi
+    fi
+  else
+    JAVACMD="$(
+      'set' +e
+      'unset' -f command 2>/dev/null
+      'command' -v java
+    )" || :
+    JAVACCMD="$(
+      'set' +e
+      'unset' -f command 2>/dev/null
+      'command' -v javac
+    )" || :
+
+    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
+      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
+      return 1
+    fi
+  fi
+}
+
+# hash string like Java String::hashCode
+hash_string() {
+  str="${1:-}" h=0
+  while [ -n "$str" ]; do
+    char="${str%"${str#?}"}"
+    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
+    str="${str#?}"
+  done
+  printf %x\\n $h
+}
+
+verbose() { :; }
+[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }
+
+die() {
+  printf %s\\n "$1" >&2
+  exit 1
+}
+
+trim() {
+  # MWRAPPER-139:
+  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
+  #   Needed for removing poorly interpreted newline sequences when running in more
+  #   exotic environments such as mingw bash on Windows.
+  printf "%s" "${1}" | tr -d '[:space:]'
+}
+
+# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
+while IFS="=" read -r key value; do
+  case "${key-}" in
+  distributionUrl) distributionUrl=$(trim "${value-}") ;;
+  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
+  esac
+done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
+[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"
+
+case "${distributionUrl##*/}" in
+maven-mvnd-*bin.*)
+  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
+  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
+  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
+  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
+  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
+  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
+  *)
+    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
+    distributionPlatform=linux-amd64
+    ;;
+  esac
+  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
+  ;;
+maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
+*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
+esac
+
+# apply MVNW_REPOURL and calculate MAVEN_HOME
+# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
+[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
+distributionUrlName="${distributionUrl##*/}"
+distributionUrlNameMain="${distributionUrlName%.*}"
+distributionUrlNameMain="${distributionUrlNameMain%-bin}"
+MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
+MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"
+
+exec_maven() {
+  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
+  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
+}
+
+if [ -d "$MAVEN_HOME" ]; then
+  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
+  exec_maven "$@"
+fi
+
+case "${distributionUrl-}" in
+*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
+*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
+esac
+
+# prepare tmp dir
+if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
+  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
+  trap clean HUP INT TERM EXIT
+else
+  die "cannot create temp dir"
+fi
+
+mkdir -p -- "${MAVEN_HOME%/*}"
+
+# Download and Install Apache Maven
+verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
+verbose "Downloading from: $distributionUrl"
+verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"
+
+# select .zip or .tar.gz
+if ! command -v unzip >/dev/null; then
+  distributionUrl="${distributionUrl%.zip}.tar.gz"
+  distributionUrlName="${distributionUrl##*/}"
+fi
+
+# verbose opt
+__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
+[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v
+
+# normalize http auth
+case "${MVNW_PASSWORD:+has-password}" in
+'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
+has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
+esac
+
+if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
+  verbose "Found wget ... using wget"
+  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
+elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
+  verbose "Found curl ... using curl"
+  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
+elif set_java_home; then
+  verbose "Falling back to use Java to download"
+  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
+  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
+  cat >"$javaSource" <<-END
+	public class Downloader extends java.net.Authenticator
+	{
+	  protected java.net.PasswordAuthentication getPasswordAuthentication()
+	  {
+	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
+	  }
+	  public static void main( String[] args ) throws Exception
+	  {
+	    setDefault( new Downloader() );
+	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
+	  }
+	}
+	END
+  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
+  verbose " - Compiling Downloader.java ..."
+  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
+  verbose " - Running Downloader.java ..."
+  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
+fi
+
+# If specified, validate the SHA-256 sum of the Maven distribution zip file
+if [ -n "${distributionSha256Sum-}" ]; then
+  distributionSha256Result=false
+  if [ "$MVN_CMD" = mvnd.sh ]; then
+    echo "Checksum validation is not supported for maven-mvnd." >&2
+    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
+    exit 1
+  elif command -v sha256sum >/dev/null; then
+    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
+      distributionSha256Result=true
+    fi
+  elif command -v shasum >/dev/null; then
+    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
+      distributionSha256Result=true
+    fi
+  else
+    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
+    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
+    exit 1
+  fi
+  if [ $distributionSha256Result = false ]; then
+    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
+    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
+    exit 1
+  fi
+fi
+
+# unzip and move
+if command -v unzip >/dev/null; then
+  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
+else
+  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
+fi
+printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
+mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"
+
+clean || :
+exec_maven "$@"
Index: mvnw.cmd
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mvnw.cmd b/mvnw.cmd
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/mvnw.cmd	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,149 @@
+<# : batch portion
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    https://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Apache Maven Wrapper startup batch script, version 3.3.2
+@REM
+@REM Optional ENV vars
+@REM   MVNW_REPOURL - repo url base for downloading maven distribution
+@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
+@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
+@REM ----------------------------------------------------------------------------
+
+@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
+@SET __MVNW_CMD__=
+@SET __MVNW_ERROR__=
+@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
+@SET PSModulePath=
+@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
+  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
+)
+@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
+@SET __MVNW_PSMODULEP_SAVE=
+@SET __MVNW_ARG0_NAME__=
+@SET MVNW_USERNAME=
+@SET MVNW_PASSWORD=
+@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
+@echo Cannot start maven from wrapper >&2 && exit /b 1
+@GOTO :EOF
+: end batch / begin powershell #>
+
+$ErrorActionPreference = "Stop"
+if ($env:MVNW_VERBOSE -eq "true") {
+  $VerbosePreference = "Continue"
+}
+
+# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
+$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
+if (!$distributionUrl) {
+  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
+}
+
+switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
+  "maven-mvnd-*" {
+    $USE_MVND = $true
+    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
+    $MVN_CMD = "mvnd.cmd"
+    break
+  }
+  default {
+    $USE_MVND = $false
+    $MVN_CMD = $script -replace '^mvnw','mvn'
+    break
+  }
+}
+
+# apply MVNW_REPOURL and calculate MAVEN_HOME
+# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
+if ($env:MVNW_REPOURL) {
+  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
+  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
+}
+$distributionUrlName = $distributionUrl -replace '^.*/',''
+$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
+$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
+if ($env:MAVEN_USER_HOME) {
+  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
+}
+$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
+$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"
+
+if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
+  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
+  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
+  exit $?
+}
+
+if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
+  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
+}
+
+# prepare tmp dir
+$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
+$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
+$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
+trap {
+  if ($TMP_DOWNLOAD_DIR.Exists) {
+    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
+    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
+  }
+}
+
+New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null
+
+# Download and Install Apache Maven
+Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
+Write-Verbose "Downloading from: $distributionUrl"
+Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"
+
+$webclient = New-Object System.Net.WebClient
+if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
+  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
+}
+[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
+$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null
+
+# If specified, validate the SHA-256 sum of the Maven distribution zip file
+$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
+if ($distributionSha256Sum) {
+  if ($USE_MVND) {
+    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
+  }
+  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
+  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
+    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
+  }
+}
+
+# unzip and move
+Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
+Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
+try {
+  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
+} catch {
+  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
+    Write-Error "fail to move MAVEN_HOME"
+  }
+} finally {
+  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
+  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
+}
+
+Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/pom.xml	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>org.springframework.boot</groupId>
+		<artifactId>spring-boot-starter-parent</artifactId>
+		<version>3.3.3</version>
+		<relativePath/> <!-- lookup parent from repository -->
+	</parent>
+	<groupId>UN</groupId>
+	<artifactId>Sanad</artifactId>
+	<version>0.0.1-SNAPSHOT</version>
+	<name>Sanad</name>
+	<description>Demo project for Spring Boot</description>
+	<url/>
+	<licenses>
+		<license/>
+	</licenses>
+	<developers>
+		<developer/>
+	</developers>
+	<scm>
+		<connection/>
+		<developerConnection/>
+		<tag/>
+		<url/>
+	</scm>
+	<properties>
+		<java.version>21</java.version>
+	</properties>
+	<dependencies>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-jpa</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.postgresql</groupId>
+			<artifactId>postgresql</artifactId>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.projectlombok</groupId>
+			<artifactId>lombok</artifactId>
+			<optional>true</optional>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-validation</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>com.github.javafaker</groupId>
+			<artifactId>javafaker</artifactId>
+			<version>1.0.2</version>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.springframework.boot</groupId>
+				<artifactId>spring-boot-maven-plugin</artifactId>
+				<configuration>
+					<excludes>
+						<exclude>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+						</exclude>
+					</excludes>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+</project>
Index: src/main/java/UN/Sanad/Activity/Mapper/ActivityMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Activity/Mapper/ActivityMapper.java b/src/main/java/UN/Sanad/Activity/Mapper/ActivityMapper.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Activity/Mapper/ActivityMapper.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,8 @@
+package UN.Sanad.Activity.Mapper;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class ActivityMapper {
+
+}
Index: src/main/java/UN/Sanad/Activity/Service/ActivityService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Activity/Service/ActivityService.java b/src/main/java/UN/Sanad/Activity/Service/ActivityService.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Activity/Service/ActivityService.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,8 @@
+package UN.Sanad.Activity.Service;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class ActivityService {
+
+}
Index: src/main/java/UN/Sanad/Activity/controller/ActivityController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Activity/controller/ActivityController.java b/src/main/java/UN/Sanad/Activity/controller/ActivityController.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Activity/controller/ActivityController.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,16 @@
+package UN.Sanad.Activity.controller;
+
+import UN.Sanad.Activity.model.Activity;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.List;
+
+@RestController
+public class ActivityController {
+    @GetMapping(name = "activities")
+    public List<Activity> activities(){
+        return null;
+    }
+
+}
Index: src/main/java/UN/Sanad/Activity/dto/ActivityDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Activity/dto/ActivityDto.java b/src/main/java/UN/Sanad/Activity/dto/ActivityDto.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Activity/dto/ActivityDto.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,6 @@
+package UN.Sanad.Activity.dto;
+
+public record ActivityDto(
+        String name
+) {
+}
Index: src/main/java/UN/Sanad/Activity/model/Activity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Activity/model/Activity.java b/src/main/java/UN/Sanad/Activity/model/Activity.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Activity/model/Activity.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,27 @@
+package UN.Sanad.Activity.model;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.time.LocalDateTime;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+
+@Entity
+public class Activity {
+    @Id
+    @GeneratedValue
+    private Integer id;
+    private String description;
+    private String category;
+    private LocalDateTime startDate;
+    private LocalDateTime endDate;
+    private int budget;
+
+}
Index: src/main/java/UN/Sanad/Activity/repo/ActivityRepo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Activity/repo/ActivityRepo.java b/src/main/java/UN/Sanad/Activity/repo/ActivityRepo.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Activity/repo/ActivityRepo.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,7 @@
+package UN.Sanad.Activity.repo;
+
+import UN.Sanad.Activity.model.Activity;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface ActivityRepo extends JpaRepository<Activity,Integer> {
+}
Index: src/main/java/UN/Sanad/EmpAct/Mapper/EmpActMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/EmpAct/Mapper/EmpActMapper.java b/src/main/java/UN/Sanad/EmpAct/Mapper/EmpActMapper.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/EmpAct/Mapper/EmpActMapper.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,8 @@
+package UN.Sanad.EmpAct.Mapper;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class EmpActMapper {
+
+}
Index: src/main/java/UN/Sanad/EmpAct/Service/EmpActService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/EmpAct/Service/EmpActService.java b/src/main/java/UN/Sanad/EmpAct/Service/EmpActService.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/EmpAct/Service/EmpActService.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,8 @@
+package UN.Sanad.EmpAct.Service;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class EmpActService {
+
+}
Index: src/main/java/UN/Sanad/EmpAct/controller/EmpActController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/EmpAct/controller/EmpActController.java b/src/main/java/UN/Sanad/EmpAct/controller/EmpActController.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/EmpAct/controller/EmpActController.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,10 @@
+package UN.Sanad.EmpAct.controller;
+
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("api/")
+public class EmpActController {
+
+}
Index: src/main/java/UN/Sanad/EmpAct/dto/EmpActDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/EmpAct/dto/EmpActDto.java b/src/main/java/UN/Sanad/EmpAct/dto/EmpActDto.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/EmpAct/dto/EmpActDto.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,6 @@
+package UN.Sanad.EmpAct.dto;
+
+public record EmpActDto(
+        String name
+) {
+}
Index: src/main/java/UN/Sanad/EmpAct/model/ActEmp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/EmpAct/model/ActEmp.java b/src/main/java/UN/Sanad/EmpAct/model/ActEmp.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/EmpAct/model/ActEmp.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,21 @@
+package UN.Sanad.EmpAct.model;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+
+@Entity
+public class ActEmp {
+    @Id
+    @GeneratedValue
+    private Integer id;
+
+
+}
Index: src/main/java/UN/Sanad/EmpAct/repo/EmpActRepo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/EmpAct/repo/EmpActRepo.java b/src/main/java/UN/Sanad/EmpAct/repo/EmpActRepo.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/EmpAct/repo/EmpActRepo.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,7 @@
+package UN.Sanad.EmpAct.repo;
+
+import UN.Sanad.EmpAct.model.ActEmp;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface EmpActRepo extends JpaRepository<ActEmp,Integer> {
+}
Index: src/main/java/UN/Sanad/Employee/Mapper/EmployeeMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Employee/Mapper/EmployeeMapper.java b/src/main/java/UN/Sanad/Employee/Mapper/EmployeeMapper.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Employee/Mapper/EmployeeMapper.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,8 @@
+package UN.Sanad.Employee.Mapper;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class EmployeeMapper {
+
+}
Index: src/main/java/UN/Sanad/Employee/Service/EmployeeService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Employee/Service/EmployeeService.java b/src/main/java/UN/Sanad/Employee/Service/EmployeeService.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Employee/Service/EmployeeService.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,8 @@
+package UN.Sanad.Employee.Service;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class EmployeeService {
+
+}
Index: src/main/java/UN/Sanad/Employee/controller/EmployeeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Employee/controller/EmployeeController.java b/src/main/java/UN/Sanad/Employee/controller/EmployeeController.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Employee/controller/EmployeeController.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,10 @@
+package UN.Sanad.Employee.controller;
+
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("api/")
+public class EmployeeController {
+
+}
Index: src/main/java/UN/Sanad/Employee/dto/EmployeeDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Employee/dto/EmployeeDto.java b/src/main/java/UN/Sanad/Employee/dto/EmployeeDto.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Employee/dto/EmployeeDto.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,6 @@
+package UN.Sanad.Employee.dto;
+
+public record EmployeeDto(
+        String name
+) {
+}
Index: src/main/java/UN/Sanad/Employee/model/Employee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Employee/model/Employee.java b/src/main/java/UN/Sanad/Employee/model/Employee.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Employee/model/Employee.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,28 @@
+package UN.Sanad.Employee.model;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.time.LocalDateTime;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+
+@Entity
+
+public class Employee {
+    @Id
+    @GeneratedValue
+    private Integer id;
+    private LocalDateTime startDate;
+    private LocalDateTime endDate;
+    private boolean isCoach;
+    private int salary;
+    private int hours;
+
+}
Index: src/main/java/UN/Sanad/Employee/repo/EmployeeRepo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/Employee/repo/EmployeeRepo.java b/src/main/java/UN/Sanad/Employee/repo/EmployeeRepo.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/Employee/repo/EmployeeRepo.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,7 @@
+package UN.Sanad.Employee.repo;
+
+import UN.Sanad.Employee.model.Employee;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface EmployeeRepo extends JpaRepository<Employee,Integer> {
+}
Index: src/main/java/UN/Sanad/SanadApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/SanadApplication.java b/src/main/java/UN/Sanad/SanadApplication.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/SanadApplication.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,13 @@
+package UN.Sanad;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class SanadApplication {
+
+	public static void main(String[] args) {
+		SpringApplication.run(SanadApplication.class, args);
+	}
+
+}
Index: src/main/java/UN/Sanad/User/Mapper/UserMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/User/Mapper/UserMapper.java b/src/main/java/UN/Sanad/User/Mapper/UserMapper.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/User/Mapper/UserMapper.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,8 @@
+package UN.Sanad.User.Mapper;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class UserMapper {
+
+}
Index: src/main/java/UN/Sanad/User/Service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/User/Service/UserService.java b/src/main/java/UN/Sanad/User/Service/UserService.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/User/Service/UserService.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,8 @@
+package UN.Sanad.User.Service;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class UserService {
+
+}
Index: src/main/java/UN/Sanad/User/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/User/controller/UserController.java b/src/main/java/UN/Sanad/User/controller/UserController.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/User/controller/UserController.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,24 @@
+package UN.Sanad.User.controller;
+
+import UN.Sanad.User.model.Users;
+import UN.Sanad.User.repo.UserRepo;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.List;
+
+@RestController
+@RequestMapping("api/")
+public class UserController {
+    private final UserRepo userRepo;
+
+    public UserController(UserRepo userRepo) {
+        this.userRepo = userRepo;
+    }
+
+    @GetMapping(name = "Users")
+    List<Users> getAllUsers(){
+        return userRepo.findAll();
+    }
+}
Index: src/main/java/UN/Sanad/User/dto/UserDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/User/dto/UserDto.java b/src/main/java/UN/Sanad/User/dto/UserDto.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/User/dto/UserDto.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,6 @@
+package UN.Sanad.User.dto;
+
+public record UserDto(
+        String name
+) {
+}
Index: src/main/java/UN/Sanad/User/model/Users.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/User/model/Users.java b/src/main/java/UN/Sanad/User/model/Users.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/User/model/Users.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,42 @@
+package UN.Sanad.User.model;
+import UN.Sanad.UserAct.model.UserAct;
+import jakarta.persistence.*;
+import jakarta.validation.constraints.Email;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+public class Users {
+    @Id
+    @GeneratedValue
+    private Integer id;
+
+    @Column(length = 20)
+
+    private String name;
+
+    @Column(unique = true)
+    @Email
+    private String email;
+
+    private String password;
+
+    private LocalDateTime brithDate;
+
+    private String gender;
+
+    private String address;
+
+    private String phoneNumber;
+
+    @OneToMany(mappedBy = "user")
+    private List<UserAct> userActs;
+
+}
\ No newline at end of file
Index: src/main/java/UN/Sanad/User/repo/UserRepo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/User/repo/UserRepo.java b/src/main/java/UN/Sanad/User/repo/UserRepo.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/User/repo/UserRepo.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,7 @@
+package UN.Sanad.User.repo;
+
+import UN.Sanad.User.model.Users;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface UserRepo extends JpaRepository<Users,Integer> {
+}
Index: src/main/java/UN/Sanad/UserAct/Mapper/UserActMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/UserAct/Mapper/UserActMapper.java b/src/main/java/UN/Sanad/UserAct/Mapper/UserActMapper.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/UserAct/Mapper/UserActMapper.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,8 @@
+package UN.Sanad.UserAct.Mapper;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class UserActMapper {
+
+}
Index: src/main/java/UN/Sanad/UserAct/Service/UserActService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/UserAct/Service/UserActService.java b/src/main/java/UN/Sanad/UserAct/Service/UserActService.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/UserAct/Service/UserActService.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,8 @@
+package UN.Sanad.UserAct.Service;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class UserActService {
+
+}
Index: src/main/java/UN/Sanad/UserAct/controller/UserActController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/UserAct/controller/UserActController.java b/src/main/java/UN/Sanad/UserAct/controller/UserActController.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/UserAct/controller/UserActController.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,10 @@
+package UN.Sanad.UserAct.controller;
+
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("api/")
+public class UserActController {
+
+}
Index: src/main/java/UN/Sanad/UserAct/dto/UserActDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/UserAct/dto/UserActDto.java b/src/main/java/UN/Sanad/UserAct/dto/UserActDto.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/UserAct/dto/UserActDto.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,6 @@
+package UN.Sanad.UserAct.dto;
+
+public record UserActDto(
+        String name
+) {
+}
Index: src/main/java/UN/Sanad/UserAct/model/UserAct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/UserAct/model/UserAct.java b/src/main/java/UN/Sanad/UserAct/model/UserAct.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/UserAct/model/UserAct.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,22 @@
+package UN.Sanad.UserAct.model;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+
+@Entity
+public class UserAct {
+    @Id
+    @GeneratedValue
+    private Integer id;
+    private int bucketMoney;
+    private boolean isFavourite;
+
+}
Index: src/main/java/UN/Sanad/UserAct/repo/UserActRepo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UN/Sanad/UserAct/repo/UserActRepo.java b/src/main/java/UN/Sanad/UserAct/repo/UserActRepo.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/java/UN/Sanad/UserAct/repo/UserActRepo.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,7 @@
+package UN.Sanad.UserAct.repo;
+
+import UN.Sanad.Employee.model.Employee;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface UserActRepo extends JpaRepository<Employee,Integer> {
+}
Index: src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/main/resources/application.yml	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,13 @@
+spring:
+  application:
+    name: Sanad
+  datasource:
+    url: jdbc:postgresql://localhost:5432/postgres
+    username: postgres
+    password: admin
+    driver-class-name: org.postgresql.Driver
+  jpa:
+    hibernate:
+      ddl-auto: create-drop
+    database: postgresql
+    show-sql: true
Index: src/test/java/UN/Sanad/SanadApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/UN/Sanad/SanadApplicationTests.java b/src/test/java/UN/Sanad/SanadApplicationTests.java
new file mode 100644
--- /dev/null	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
+++ b/src/test/java/UN/Sanad/SanadApplicationTests.java	(revision 2576768d91eb8c44abdf0349634cc4a7e198343c)
@@ -0,0 +1,13 @@
+package UN.Sanad;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class SanadApplicationTests {
+
+	@Test
+	void contextLoads() {
+	}
+
+}
